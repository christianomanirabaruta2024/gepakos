{% extends 'base.html.twig' %}

{% block title %}Page de connexion
{% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="{{ asset('css/login.css') }}">
{% endblock %}

{% block body %}
	<div class="wrapper">
		<div class="left-part">
			<div class="top-header">
				<div class="logo">log</div>
				<div class="title">GEPAKOS</div>
			</div>
			<div class="middle-part">
				<h1>Se connecter</h1>
				<p>Entrez vos informations pour vous authentifier</p>
			</div>
			<form id="login-form" action="{{ path('app_login') }}" method="post">
				<div class="input">
					<label for="first-input">Email / Nom d'utilisateur</label>
					<input type="text" name="email" id="first-input" required>
				</div>
				<div class="input">
					<label for="second-input">Mot de passe</label>
					<div style="position: relative;">
						<input type="password" name="password" id="second-input" required>
						<button type="button" id="toggle-password" style="    position: absolute;
														    right: 60px;
														    top: 1px;
														    outline: none;
														    border: 0;
														    background: transparent;
														    font-size: 25px;">👁</button>
					</div>
				</div>

				<div class="persist-remember">
					<div class="remember-container">
						<input type="checkbox" name="remember" id="checkbox">
						<label for="checkbox">Se souvenir de moi</label>
					</div>
					<a href="/">Mot de passe oublié ?</a>
				</div>

				<div class="submit-button">
					<input type="submit" value="Se connecter" id="submit-button">
				</div>
			</form>

			<div id="response-message" style="margin-top: 20px; color: red;"></div>
			<div id="loading" style="display: none;">Chargement...</div>

			<div class="terms-conditions">
				<div class="copy">
					<a href="#">&copy; 2024</a>
				</div>
				<div class="terms">
					<a href="#">Termes et conditions</a>
				</div>
				<div class="copy">
					<a href="#">Comment ça fonctionne</a>
				</div>

			</div>
		</div>

		<div
			class="right-part">
			{# <div class="stash"></div>
						<div class="cross"></div> #}
			<img src="{{ asset('images/cathedrale.jpg') }}"/>
		</div>
	</div>

	<!-- Script AJAX avec validation, blocage et affichage du mot de passe -->
	<script>
	document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('login-form');
    const emailInput = document.getElementById('first-input');
    const passwordInput = document.getElementById('second-input');
    const togglePassword = document.getElementById('toggle-password');
    const responseMessage = document.getElementById('response-message');
    const loadingMessage = document.getElementById('loading');
    const submitButton = document.getElementById('submit-button');

    form.addEventListener('submit', async (event) => {
        event.preventDefault();

        // Réinitialiser les messages d'erreur
        responseMessage.textContent = '';
        responseMessage.classList.add('hidden');
        loadingMessage.classList.remove('hidden');
        submitButton.disabled = true;

        // Validation de l'email
        const emailRegex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
        if (!emailRegex.test(emailInput.value)) {
            responseMessage.textContent = 'Veuillez entrer une adresse email valide.';
            responseMessage.style.color = 'red';
            responseMessage.classList.remove('hidden');
            loadingMessage.classList.add('hidden');
            submitButton.disabled = false;
            return;
        }

        // Préparer la requête
        const formData = new FormData(form);

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            const data = await response.json();
            loadingMessage.classList.add('hidden');
            submitButton.disabled = false;

            responseMessage.textContent = data.message;
            responseMessage.style.color = data.status === 'success' ? 'green' : 'red';
            responseMessage.classList.remove('hidden');

            if (data.status === 'success') {
                setTimeout(() => window.location.href = '/', 2000); // Redirection après succès
            }
        } catch (error) {
            console.error('Erreur:', error);
            responseMessage.textContent = 'Une erreur est survenue. Veuillez réessayer plus tard.';
            responseMessage.style.color = 'red';
            responseMessage.classList.remove('hidden');
            loadingMessage.classList.add('hidden');
            submitButton.disabled = false;
        }
    });

    // Afficher ou masquer le mot de passe
    togglePassword.addEventListener('click', () => {
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            togglePassword.textContent = '🙈';
        } else {
            passwordInput.type = 'password';
            togglePassword.textContent = '👁';
        }
    });
});

	</script>
{% endblock %}
